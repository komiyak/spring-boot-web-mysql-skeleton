buildscript {
	ext {
		// load spring application.properties
		springProps = new Properties()
		file("src/main/resources/application.properties").withInputStream { springProps.load(it) }
	}
}

plugins {
	id 'nu.studer.jooq' version '4.2'
	id 'org.springframework.boot' version '2.3.1.RELEASE'
	id 'io.spring.dependency-management' version '1.0.9.RELEASE'
	id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-jooq'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.flywaydb:flyway-core'
	compileOnly 'org.projectlombok:lombok'
	jooqRuntime 'mysql:mysql-connector-java'
	runtimeOnly 'mysql:mysql-connector-java'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

test {
	useJUnitPlatform()
}

jooq {
	generateSchemaSourceOnCompilation = true
	myDemo(sourceSets.main) {
		jdbc {
			driver = springProps.getProperty("spring.datasource.driver-class-name")
			url = springProps.getProperty("spring.datasource.url")
			user = springProps.getProperty("spring.datasource.username")
			password = springProps.getProperty("spring.datasource.password")
		}

		generator {
			database {
				name = 'org.jooq.meta.mysql.MySQLDatabase'
				inputSchema = 'db_example' // database name
			}
			generate {
				relations = true
				deprecated = false
				records = true
				immutablePojos = true
				fluentSetters = true
			}
			target {
				packageName = 'com.example.jooq'
			}
		}
	}
}
